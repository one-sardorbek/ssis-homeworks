<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/5/2025 1:13:42 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-5K5RC72"
  DTS:CreatorName="DESKTOP-5K5RC72\sardorbek"
  DTS:DTSID="{DEF3EC46-FEDC-485E-B19A-9A193F27E60C}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5685.2"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="24"
  DTS:VersionGUID="{C04AB146-E3B8-4BB1-A9AA-E19962501D17}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DESKTOP-5K5RC72.ssis7]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{B2D93139-2551-4685-B608-84438716D5A3}"
      DTS:ObjectName="DESKTOP-5K5RC72.ssis7">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=DESKTOP-5K5RC72;Initial Catalog=ssis7;Provider=MSOLEDBSQL.1;Integrated Security=SSPI;Application Name=SSIS-Package-{B2D93139-2551-4685-B608-84438716D5A3}DESKTOP-5K5RC72.ssis7;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{A13968BB-F9B9-4500-8333-0D197EA423D4}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="0"
          DTS:ConnectRetryInterval="0"
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Users\sardorbek\Desktop\source\id,name.xlsx;Extended Properties=&quot;Excel 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B0FDD9D0-A2D7-470F-9717-68E17670F1E7}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="sourcefolder">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\sardorbek\Desktop\source\</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{3506EA00-D995-4369-811E-CA22567183EB}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_98c73c0de0524fe1a7a76937577f6241"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::sourcefolder">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_98c73c0de0524fe1a7a76937577f6241.Properties.Settings.get_Default():ST_98c73c0de0524fe1a7a76937577f6241.Properties.Sett" +
    "ings")]

namespace ST_98c73c0de0524fe1a7a76937577f6241.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using Microsoft.SqlServer.Dts.Runtime;
using System;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.IO;
using System.Windows.Forms;
#endregion

namespace ST_98c73c0de0524fe1a7a76937577f6241
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            string sourcefolder = Dts.Variables["User::sourcefolder"].Value.ToString();
            string[] listofexcelsheets = new string[2] { "group1$", "group2$" };
            DataTable dt = new DataTable();

            foreach (FileInfo files in new DirectoryInfo(sourcefolder).GetFiles())
            {
                string excelconstring = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + files.FullName + ";Extended Properties=\"Excel 12.0 XML;HDR=YES\";";
                foreach (string excelsheet in listofexcelsheets)
                {
                    using (OleDbConnection con = new OleDbConnection(excelconstring))
                    {
                        OleDbCommand cmd = new OleDbCommand("select * from [" + excelsheet + "]", con);
                        con.Open();
                        DataTable sheetTable = new DataTable();
                        OleDbDataAdapter da = new OleDbDataAdapter(cmd);
                        da.Fill(sheetTable);

                        // Save to txt file (append if exists, write header only if new)
                        string txtFileName = Path.Combine(sourcefolder, excelsheet.TrimEnd('$') + ".txt");
                        bool fileExists = File.Exists(txtFileName);
                        using (StreamWriter sw = new StreamWriter(txtFileName, true)) // append mode
                        {
                            if (!fileExists)
                            {
                                // Write header
                                for (int i = 0; i < sheetTable.Columns.Count; i++)
                                {
                                    sw.Write(sheetTable.Columns[i]);
                                    if (i < sheetTable.Columns.Count - 1)
                                        sw.Write("\t");
                                }
                                sw.WriteLine();
                            }

                            // Write rows
                            foreach (DataRow row in sheetTable.Rows)
                            {
                                for (int i = 0; i < sheetTable.Columns.Count; i++)
                                {
                                    sw.Write(row[i]?.ToString());
                                    if (i < sheetTable.Columns.Count - 1)
                                        sw.Write("\t");
                                }
                                sw.WriteLine();
                            }
                        }

                        // Merge into main DataTable for SQL bulk copy
                        if (dt.Columns.Count == 0)
                            dt = sheetTable.Clone(); // Copy structure only once
                        foreach (DataRow row in sheetTable.Rows)
                            dt.ImportRow(row);

                        con.Close();
                    }
                }
            }

            using (SqlConnection sqlcon = new SqlConnection("Data Source=DESKTOP-5K5RC72;Initial Catalog=ssis7;Integrated Security=SSPI;"))
            {
                sqlcon.Open();
                using (SqlBulkCopy bc = new SqlBulkCopy(sqlcon))
                {
                    bc.DestinationTableName = "Customer";
                    foreach (DataColumn column in dt.Columns)
                    {
                        bc.ColumnMappings.Add(column.ColumnName, column.ColumnName);
                    }
                    bc.WriteToServer(dt);
                }
            }

            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_98c73c0de0524fe1a7a76937577f6241.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_98c73c0de0524fe1a7a76937577f6241.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_98c73c0de0524fe1a7a76937577f6241.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_98c73c0de0524fe1a7a76937577f6241.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_98c73c0de0524fe1a7a76937577f6241.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_98c73c0de0524fe1a7a76937577f6241</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_98c73c0de0524fe1a7a76937577f6241</msb:DisplayName>
    <msb:ProjectId>{DF10128C-CB5F-4073-AA11-3C7239C33B21}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_98c73c0de0524fe1a7a76937577f6241.csproj" />
    <msb:File Include="ScriptMain.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_98c73c0de0524fe1a7a76937577f6241")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_98c73c0de0524fe1a7a76937577f6241")]
[assembly: AssemblyCopyright("Copyright @  2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ST_98c73c0de0524fe1a7a76937577f6241.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{82CDA58F-D957-48C4-BC6C-2B27C98868A5}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_98c73c0de0524fe1a7a76937577f6241</RootNamespace>
    <AssemblyName>ST_98c73c0de0524fe1a7a76937577f6241</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <BinaryItem
            Name="ST_98c73c0de0524fe1a7a76937577f6241.dll">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
ABYAAAEAAAA3AAAABQAAAAYAAAAJAAAAAQAAAEAAAAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAAB
AAAABQAAAAEAAAABAAAAAABrBAEAAAAAAAYA/QJHBgYAjANHBgYASQI0Bg8AuwYAAAYAdgL+BAYA
4AL+BAYAwQL+BAYAcwP+BAYAHQP+BAYANgP+BAYAjQL+BAYAqAK6AwoAUQMaBAoAmQEaBA4ArwBf
AAYAiwUuAA4AWgVrAAYA1gUuAAYADQY4Bw4A1wdfAAYAwgChBA4AagWiBw4A9geiBw4AyQRfAAYA
qAShBAYALAI0BgYAgAehBAYAxgVnBgYAlAXpBBIA9gFVBBIAXQJVBBIA0AHUBAYAEQJHBgoAQwQa
BBYA/QYsARYAuQAsAQYA7wOhBAYArwUuAAYAoAUuAA4AkgBrAA4AXQV4BQ4A7gVrAA4A8QV4BQYA
vQWhBAYA9gMuAAYA8gAuAA4AMwVfAAYA4wUuAA4AtQFfAA4ASAVfAA4AEAWiBw4A1AOiBwYAZAGh
BAYAzgChBAYA7Qf+BAAAAAAlAAAAAAABAAEAAQAQAL4EAQA5AAEAAQAAABAAbgbKBm0AAQADAAAB
EAAjB8oGgQADAAcAAwEAAFsHAABlAAQACgARAK0EGQERAIkBHQERAJ8AIQEGBlcAJQFWgEsHKAFW
gGkBKAFQIAAAAACGAMQEBgABADgkAAAAAIYYJwYGAAEAQCQAAAAAgxgnBgYAAQBIJAAAAACTCMIF
LAEBAHQkAAAAAJMIcQExAQEAeyQAAAAAkwh9ATYBAQCDJAAAAACWCIcHPAECAIokAAAAAIYYJwYG
AAIAkiQAAAAAkRgtBkEBAgAAAAEAtAMJACcGAQARACcGBgAZACcGCgApACcGEAAxACcGEAA5ACcG
EABBACcGEABJACcGEABRACcGEABZACcGEABhACcGEABpACcGBgDRACcGBgD5ACcGFQAJAScGBgBx
AFMHRQARAfkGSwAZAZgEUQAhAaoDWADZAO0DXAB5ACcGBgAxAScGEAAxAQcHYAA5ARABXAApAXkH
ZgCJACcGEABBAScGbQBJAbkEBgBRAScGdABZAZMEewApAYoAgQApAXkHhwBpAVYBhwBxAWkHjQCR
ACcGkgB5ACwHmAB5AZgEngCBAQsCpACJAcQHqQCBAQsCEACBAUwBBgB5AHAHrQCJARkGswCZALgH
WAChAJgEuACZAM4HvQCpAO4BBgB5AF4BwQB5AN8HxgBJAegBBgCxACcGEAC5ACcGzAC5APcAEAC5
ABAH0gDBAB0BXACZAYYA2AC5AP8F4AARAZMHAQBxACcGBgDZACcGBgCpAeAA5gCpAekH7wDhACcG
9QABAScGBgAIABQADwEIABgAFAEpAHMAfAEuAAsAVAEuABMAXQEuABsAfAEuACMAhQEuACsArgEu
ADMArgEuADsArgEuAEMAhQEuAEsAtAEuAFMArgEuAFsAywFDAGMAFAFJAHMAfAFhAHsAFAFjAGsA
FAEbAAMAAQAEAAMAAADGBUUBAACRAUoBAACLB08BAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAA
AAEAAABlJFFuAAAAAAAAAQAAAAQAAAAAAAAAAAAAAP0AfQAAAAAAEAAAAAAAAAAAAAAABgH7AwAA
AAAEAAAAAAAAAAAAAAD9AF8AAAAAAAQAAAAAAAAAAAAAAP0AoQQAAAAAEAAAAAAAAAAAAAAABgE4
AAAAAAAAAAAAAQAAAHgGAAAFAAIAAAAAAABTVF85OGM3M2MwZGUwNTI0ZmUxYTdhNzY5Mzc1Nzdm
NjI0MQA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZh
bHVlX18AU3lzdGVtLkRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAQWRkAFRyaW1FbmQA
T2xlRGJDb21tYW5kAGRlZmF1bHRJbnN0YW5jZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bvc2Fi
bGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZQBzZXRfRGVzdGluYXRp
b25UYWJsZU5hbWUAZ2V0X0Z1bGxOYW1lAGdldF9Db2x1bW5OYW1lAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlJ1bnRpbWUAV3JpdGVMaW5lAENvbWJpbmUAQ2xvbmUAVHlwZQBGYWlsdXJlAGdldF9D
dWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2Rl
bEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
Q2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBXcml0ZQBDb21waWxlckdlbmVyYXRl
ZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1
dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1i
bHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29u
ZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0
aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3Nl
bWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1Zh
bHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBw
aW5nAFRvU3RyaW5nAFBhdGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVt
LkNvbXBvbmVudE1vZGVsAFNUXzk4YzczYzBkZTA1MjRmZTFhN2E3NjkzNzU3N2Y2MjQxLmRsbABG
aWxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFpbgBEYXRh
Q29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5S
ZWZsZWN0aW9uAFNxbEJ1bGtDb3B5Q29sdW1uTWFwcGluZ0NvbGxlY3Rpb24ARGF0YUNvbHVtbkNv
bGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AT2xlRGJDb25uZWN0aW9uAFNxbENvbm5lY3Rpb24A
U3lzdGVtLkRhdGEuQ29tbW9uAEZpbGVJbmZvAEN1bHR1cmVJbmZvAEZpbGVTeXN0ZW1JbmZvAERp
cmVjdG9yeUluZm8AQ2hhcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAFN0cmVhbVdyaXRlcgBUZXh0V3Jp
dGVyAE9sZURiRGF0YUFkYXB0ZXIAV3JpdGVUb1NlcnZlcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJh
dG9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzk4YzczYzBkZTA1MjRmZTFhN2E3NjkzNzU3
N2Y2MjQxLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF85
OGM3M2MwZGUwNTI0ZmUxYTdhNzY5Mzc1NzdmNjI0MS5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMA
R2V0RmlsZXMAZ2V0X0NvbHVtbk1hcHBpbmdzAFNldHRpbmdzAGdldF9Db2x1bW5zAFN5c3RlbS5D
b2xsZWN0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBFeGlzdHMAZ2V0X1Jvd3MA
Q29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxD
bGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AE1vdmVOZXh0AERhdGFSb3cASW1wb3J0Um93AGdl
dF9Bc3NlbWJseQBTcWxCdWxrQ29weQAAAAAlVQBzAGUAcgA6ADoAcwBvAHUAcgBjAGUAZgBvAGwA
ZABlAHIAAA9nAHIAbwB1AHAAMQAkAAAPZwByAG8AdQBwADIAJAAAXVAAcgBvAHYAaQBkAGUAcgA9
AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBPAEwARQBEAEIALgAxADIALgAwADsARABhAHQA
YQAgAFMAbwB1AHIAYwBlAD0AAF07AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBl
AHMAPQAiAEUAeABjAGUAbAAgADEAMgAuADAAIABYAE0ATAA7AEgARABSAD0AWQBFAFMAIgA7AAAf
cwBlAGwAZQBjAHQAIAAqACAAZgByAG8AbQAgAFsAAANdAAAJLgB0AHgAdAAAAwkAAICXRABhAHQA
YQAgAFMAbwB1AHIAYwBlAD0ARABFAFMASwBUAE8AUAAtADUASwA1AFIAQwA3ADIAOwBJAG4AaQB0
AGkAYQBsACAAQwBhAHQAYQBsAG8AZwA9AHMAcwBpAHMANwA7AEkAbgB0AGUAZwByAGEAdABlAGQA
IABTAGUAYwB1AHIAaQB0AHkAPQBTAFMAUABJADsAARFDAHUAcwB0AG8AbQBlAHIAAHFTAFQAXwA5
ADgAYwA3ADMAYwAwAGQAZQAwADUAMgA0AGYAZQAxAGEANwBhADcANgA5ADMANwA1ADcANwBmADYA
MgA0ADEALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAdcWWglLy
tkeM6ja6dQjhywAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQEReSkHFw4dDhI9HRJBCBJBDh0OCA4S
RRI9AhJJCBJNElEIElUSURJZEl0SYQUgABKAiQUgABKAjQYgARKAkRwDIAAcAyAADgUgAB0SQQYA
Aw4ODg4GIAIBDhJFBiABARKAoQUgAQgSPQUgAQ4dAwUAAg4ODgQAAQIOBSACAQ4CBSAAEoC9BSAB
EmEIBCABARwDIAAIBSAAEoDJBCAAEk0EIAEcCAMgAAIEIAASPQUgAQESUQUgAQESWQUgABKAzQcg
AhKA0Q4OBSABARI9CAABEoDVEYDZBSAAEoDdByACAQ4SgN0It3pcVhk04IkIiYRdzYCAzJEEAAAA
AAQBAAAAAwYScQMGEnUDBhIQAgYIAwYRFAQAABJxBAAAEnUFAAEBEnUEAAASEAMAAAEECAAScQQI
ABJ1BAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAA
KAEAI1NUXzk4YzczYzBkZTA1MjRmZTFhN2E3NjkzNzU3N2Y2MjQxAAAFAQAAAAAWAQARQ29weXJp
Z2h0IEAgIDIwMjUAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNwEAVA4URnJhbWV3b3Jr
RGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43AAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0u
UmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0
dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291
cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAALg3AAAAAAAAAAAA
ANI3AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADENwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1z
Y29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAFFuZSQAAAEAUW5lJD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAA
UwBUAF8AOQA4AGMANwAzAGMAMABkAGUAMAA1ADIANABmAGUAMQBhADcAYQA3ADYAOQAzADcANQA3
ADcAZgA2ADIANAAxAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADkA
MwAxADcALgAyADgAMgA0ADEAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBU
AF8AOQA4AGMANwAzAGMAMABkAGUAMAA1ADIANABmAGUAMQBhADcAYQA3ADYAOQAzADcANQA3ADcA
ZgA2ADIANAAxAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABD
AG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADUAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEA
ZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBt
AGUAAABTAFQAXwA5ADgAYwA3ADMAYwAwAGQAZQAwADUAMgA0AGYAZQAxAGEANwBhADcANgA5ADMA
NwA1ADcANwBmADYAMgA0ADEALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAA
AAAAUwBUAF8AOQA4AGMANwAzAGMAMABkAGUAMAA1ADIANABmAGUAMQBhADcAYQA3ADYAOQAzADcA
NQA3ADcAZgA2ADIANAAxAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA5ADMAMQA3AC4AMgA4ADIANAAxAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgA5ADMAMQA3AC4AMgA4ADIANAAxAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAOQ3AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="130.4,41.6"
          Id="Package\Script Task"
          TopLeft="129.166659609312,228.799998408953" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>